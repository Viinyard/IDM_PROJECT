/*
 * generated by Xtext 2.15.0
 */
package fr.istic.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.istic.videoGen.VideoGeneratorModel
import org.eclipse.emf.ecore.EObject
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import fr.istic.videoGen.VideoGenInformation
import fr.istic.videoGen.Media
import fr.istic.videoGen.MandatoryMedia
import fr.istic.videoGen.OptionalMedia
import fr.istic.videoGen.AlternativesMedia
import fr.istic.videoGen.MediaDescription
import fr.istic.videoGen.VideoDescription
import fr.istic.videoGen.ImageDescription
import java.util.Optional
import java.util.Random

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VideoGenGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(EObject e : resource.getContents()) {
			if(e instanceof VideoGeneratorModel) {
				fsa.generateFile(resource.getURI() + ".ffmpeg", e.compile);
			}	
		}			
	}
	
	def compile(VideoGeneratorModel vgm) '''
		«vgm.information.compile»
		«FOR m: vgm.medias»
			«m.compile»
		«ENDFOR»
	'''
	
	def compile(VideoGenInformation vgi) '''
		«IF vgi.authorName != null»
			# author : «vgi.authorName»
		«ENDIF»
		«IF vgi.version != null»
			# version : «vgi.version»
		«ENDIF»
		«IF vgi.creationDate != null»
			# creation date : «vgi.creationDate»
		«ENDIF»
	'''
	
	def compile(Media m) '''
		«IF m instanceof MandatoryMedia»
			«m.compile»
		«ENDIF»
		«IF m instanceof OptionalMedia»
			«m.compile»
		«ENDIF»
		«IF m instanceof AlternativesMedia»
			«m.compile»
		«ENDIF»
	'''
	
	def compile(MandatoryMedia mm) '''
		«mm.description.compile»
	'''
	
	def compile(OptionalMedia om) '''
		«IF Math.random() < 0.5»
			«om.description.compile»
		«ENDIF»
	'''
	
	def compile(AlternativesMedia am) '''
		«am.medias.get(new Random().nextInt(am.medias.length)).compile»
	'''
	
	def compile(MediaDescription md) '''
		«IF md instanceof VideoDescription»
			file «md.location»
		«ENDIF»
		«IF md instanceof ImageDescription»
			# image «md.location»
		«ENDIF»
	'''
}